Form a vector of pairs, for each segment push two pairs in vector with values (l, +1)  and (r + 1, 
-1).
for(i=0; i<s; i++)
		{
			System.out.println("Enter the segment no. " + i +" : ");
			l=sc.nextInt();
			r=sc.nextInt();
			S.add(new int[]{l,r});
		}
Sort the points in ascending order, but we also need its position so mapped it using ArrayList.
for(int i = 0; i < p; i++)
		{
			pts.add(new int[]{points[i], i});
		}
Collections.sort(seg, (a, b) -> b[0] - a[0]);        uses O(nlogn) time complexity as merge sort

Sort the segment vector in descending order because we iterate on it from back.
for(int i = 0; i < s; i++)
		{
			// (l,+1)
			seg.add(new int[]{segments.get(i)[0], 1});
         
			// (r+1,-1)
			seg.add(new int[]{segments.get(i)[1] + 1, -1});
		}
Collections.sort(pts, (a, b) -> a[0] - b[0]);    uses O(nlogn) time complexity as merge sort

Make a variable count of segments, which is initially zero.
Then, we will iterate on the point and pop the pair from the segment vector until its first value is less than equal to current point and add itâ€™s second value to the count.
 Finally, Store the values of count in an array to his respective position and print the array.
for(int i = 0; i < p; i++)
		{
			int x = pts.get(i)[0];
         
			while (seg.size() != 0 && seg.get(seg.size() - 1)[0] <= x)
			{
				count += seg.get(seg.size() - 1)[1];
				seg.remove(seg.size() - 1);
			}
			ans[pts.get(i)[1]] = count;
		}
Algorithm uses O(s*log(s) + p*log(p)), where s is the number of segments and p is the number of points.

Therefore Total Time Complexity = O(slog(s)) + O(plog(p)) + O(nlog(n)) for mergesort
Which gives O(nlogn)