Brute force gives an O(n2) algorithm:
 just check ever pair of points.

def bruteForce(P, n):
    min_val = float('inf')
    for i in range(n):
        for j in range(i + 1, n):
            if dist(P[i], P[j]) < min_val:
                min_val = dist(P[i], P[j])

    return min_val

Divide set of points in half each time: O(log n) depth recursion

def stripClosest(strip, size, d):
    min_val = d
    for i in range(size):
        j = i + 1
        while j < size and (strip[j].y - strip[i].y) < min_val:
            min_val = dist(strip[i], strip[j])
            j += 1

    return min_val

Merge takes O(n) time.

    for i in range(n):
        if abs(lr[i].x - midPoint.x) < d:
            stripP.append(lr[i])
        if abs(Q[i].x - midPoint.x) < d:
            stripQ.append(Q[i])

MergeSort : O(n log n) time.

def closest(P, n):
    P.sort(key=lambda point: point.x)
    Q = copy.deepcopy(P)
    Q.sort(key=lambda point: point.y)
    return closestUtil(P, Q, n)

Therefore, Total Running Time:  n + n log n + n log n = n(1+ log n + log n)
							= 2n log n

Which gives O(n log n)

